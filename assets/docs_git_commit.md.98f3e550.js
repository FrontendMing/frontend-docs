import{_ as i,o as l,c as t,O as o}from"./chunks/framework.b3307660.js";const g=JSON.parse('{"title":"Git commit 信息规范","description":"","frontmatter":{},"headers":[],"relativePath":"docs/git/commit.md","filePath":"docs/git/commit.md"}'),e={name:"docs/git/commit.md"},a=o('<h1 id="git-commit-信息规范" tabindex="-1">Git commit 信息规范 <a class="header-anchor" href="#git-commit-信息规范" aria-label="Permalink to &quot;Git commit 信息规范&quot;">​</a></h1><h3 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h3><p>一个好的git commit信息能在追溯提交流时立刻找到对应的业务提交或者所作的操作。</p><p><strong>Git Commit 提交规范</strong></p><ul><li><p>新增类型</p><ul><li>ADD-FEAT: 新增功能提交（一般用于第一次功能代码提交）</li><li>ADD-STYLE: 新增加代码风格样式修改</li></ul></li><li><p>修改类型</p><ul><li>MOD-FEAT: 修改功能代码（一般用于第一次之后的功能代码提交）</li><li>MOD-STYLE：修改/ 整理代码风格样式，不涉及逻辑更改 （常用）</li></ul></li><li><p>Bug修复</p><ul><li>BUG-FIX: 用于平常测试的bug修复 （常用）</li><li>HOT-FIX: 用于线上紧急bug修复 （常用）</li></ul></li><li><p>删除代码</p><ul><li>DEL-STYLE：对于代码风格上删除一些无用代码、注释等</li><li>DEL-FEAT: 删除一些无用的功能块代码</li></ul></li></ul><p><strong>名词解释</strong></p><ul><li>ADD: add 的大写，代表此次操作为新增代码文件</li><li>MOD: modify 的缩写，代表此次操作是修改代码而不是新增或者删除</li><li>DEL: delete 的缩写，代表此次操作仅删除代码</li><li>BUG-FIX: bug fix 的大写，代表此次操作为修复发现的 bug</li><li>HOT-FIX: 同 bug fix，但用于线上 bug 修复时使用</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><ul><li>除非是第一次提交功能代码或者是合并代码，否则不建议一次性提交多个文件，建议单个单个文件提交。</li><li>建议大家每次提交前先查看此次修改文件的内容</li><li>使用 sourceTree 可以直接通过工具对比文件 （不推荐）</li><li>使用 vscode 可以直接在左上角对比文件</li><li>使用命令行 git status和git diff 文件名也可以查看所作的内容修改 （强烈推荐）</li></ul></div>',8),c=[a];function s(m,r,u,d,n,p){return l(),t("div",null,c)}const h=i(e,[["render",s]]);export{g as __pageData,h as default};
