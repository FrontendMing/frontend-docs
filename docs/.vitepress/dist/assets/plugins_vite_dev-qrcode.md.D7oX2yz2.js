import{_ as i,c as a,o as e,ae as n}from"./chunks/framework.Cd-3tpCq.js";const E=JSON.parse('{"title":"dev-qrcode 插件","description":"","frontmatter":{},"headers":[],"relativePath":"plugins/vite/dev-qrcode.md","filePath":"plugins/vite/dev-qrcode.md"}'),l={name:"plugins/vite/dev-qrcode.md"};function t(h,s,p,k,r,d){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="dev-qrcode-插件" tabindex="-1">dev-qrcode 插件 <a class="header-anchor" href="#dev-qrcode-插件" aria-label="Permalink to &quot;dev-qrcode 插件&quot;">​</a></h1><blockquote><p>在开发移动端页面的时候，经常会遇到需要在真机查看页面实际效果。</p><p>在手机浏览器手动输入地址，费时费力，所以我们可以编写一个 Vite 插件</p><p>来支持终端显示 <strong>项目预览地址</strong> 的 <strong>二维码</strong> 功能。</p></blockquote><h2 id="_1-vite插件开发辅助" tabindex="-1">1. Vite插件开发辅助 <a class="header-anchor" href="#_1-vite插件开发辅助" aria-label="Permalink to &quot;1. Vite插件开发辅助&quot;">​</a></h2><p>开发Vite插件建议使用开源项目<a href="https://github.com/OSpoon/generator-vite-plugin" target="_blank" rel="noreferrer">generator-vite-plugin</a>，可以通过简单了两步操作实现一个Vite插件开发的基本环境,还贴心的配置了调试脚本方便第一次开发插件时手忙脚乱；</p><h3 id="_1-1-安装generator-vite-plugin" tabindex="-1">1.1 安装generator-vite-plugin： <a class="header-anchor" href="#_1-1-安装generator-vite-plugin" aria-label="Permalink to &quot;1.1 安装generator-vite-plugin：&quot;">​</a></h3><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yo</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> generator-vite-plugin</span></span></code></pre></div><h3 id="_1-2-生成vite插件基本环境" tabindex="-1">1.2 生成Vite插件基本环境： <a class="header-anchor" href="#_1-2-生成vite插件基本环境" aria-label="Permalink to &quot;1.2 生成Vite插件基本环境：&quot;">​</a></h3><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vite-plugin</span></span></code></pre></div><p><img src="https://cdn.shopifycdn.net/s/files/1/0550/0524/9633/files/20230614142831.png?v=1686724209" alt=""></p><h2 id="_2-dev-qrcode-插件开发" tabindex="-1">2. dev-qrcode 插件开发 <a class="header-anchor" href="#_2-dev-qrcode-插件开发" aria-label="Permalink to &quot;2. dev-qrcode 插件开发&quot;">​</a></h2><p>通过第一步已经生成了<code>vite-plugin-dev-qrcode</code> 插件的基本状态，这里要介绍几个基本的前提要素：</p><ol><li>手机端需要和电脑端处于同一局域网环境；</li><li>手机端必须使用局域网分配的IP访问H5页面，Local地址无效；</li><li>Vite默认启动不提供Network地址，需要增加<code>--host</code> 参数，插件中默认已配置；</li></ol><h3 id="_2-1-获取-vite-启动后分配的-urls" tabindex="-1">2.1 获取 Vite 启动后分配的 URLs <a class="header-anchor" href="#_2-1-获取-vite-启动后分配的-urls" aria-label="Permalink to &quot;2.1 获取 Vite 启动后分配的 URLs&quot;">​</a></h3><p><code>vite</code>命令执行后会在终端启动一个开发服务器，并分配给我们访问该服务的地址，所以这里要关注的就是<code>configureServer</code> 这个钩子函数，通过该函数提供的<code>server</code> 对象可以获取到该服务的相关信息；</p><p>在<code>server</code>对象的<code>ViteDevServer</code> 类型定义中看到如下参数，在<code>server.listen</code> 之后urls将会打印到终端，这正是我要找的属性；</p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * The resolved urls Vite prints on the CLI. null in middleware mode or</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * before \`server.listen\` is called.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolvedUrls</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: ResolvedServerUrls </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h3 id="_2-2-溯源vite如何终端输出信息" tabindex="-1">2.2 溯源Vite如何终端输出信息： <a class="header-anchor" href="#_2-2-溯源vite如何终端输出信息" aria-label="Permalink to &quot;2.2 溯源Vite如何终端输出信息：&quot;">​</a></h3><p>上一步知道了urls如何获取，这一步要解决的就是vite到底是如何输出urls到终端的？在Vite源码的<code>packages/vite/src/node/server/index.ts</code> 文件中有如下这段函数，可以看出这个函数将<code>resolvedUrls</code> 内容进行了打印，在加上<code>ViteDevServer</code> 类型定义中对该函数的注释，就完全锁定了这个就是我的目标函数；</p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printUrls</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (server.resolvedUrls) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    printServerUrls</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      server.resolvedUrls,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      serverConfig.host,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      config.logger.info</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (middlewareMode) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;cannot print server URLs in middleware mode.&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &#39;cannot print server URLs before server.listen is called.&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * Print server urls</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printUrls</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h3 id="_2-3-生成二维码并在适时打印到终端" tabindex="-1">2.3 生成二维码并在适时打印到终端： <a class="header-anchor" href="#_2-3-生成二维码并在适时打印到终端" aria-label="Permalink to &quot;2.3 生成二维码并在适时打印到终端：&quot;">​</a></h3><p>生成的二维码要同urls一同输出，保持一致，这里要使用到扩展的手段来让<code>server.printUrls</code> 得到支持，类似的手段在Vue2的数组响应式实现中也有体现，不知道你是否还有印象；</p><p>具体的二维码生成使用到了<code>qrcode-terminal</code> 模块，丰富的样式输出使用<code>kolorist</code>模块，具体代码如下：</p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configureServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(server: ViteDevServer) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> _print</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> server.printUrls;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  server.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printUrls</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    _print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> host</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> server.resolvedUrls?.network[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (host) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`\${</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bold</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Scan QR code to open quickly. ⤦&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      qrcode.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">generate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">host</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { small: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        \`  \${</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">green</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;➜&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}  \${</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yellow</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Failed to get the network address.&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><img src="https://cdn.shopifycdn.net/s/files/1/0550/0524/9633/files/20230614142938.png?v=1686724209" alt=""></p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>实现这个插件仅仅使用了十几行代码，期间翻阅了 Vite 插件的开发文档和源码，分别找到了开发服务器的相关钩子函数拿到了 Vite 打印的 urls 信息，并通过扩展<code>printUrls</code> 函数在保证原始逻辑正常执行的情况下增加了二维码输出的功能。</p>`,27)]))}const g=i(l,[["render",t]]);export{E as __pageData,g as default};
