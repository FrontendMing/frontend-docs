import{_ as e,c as i,o as s,ae as l}from"./chunks/framework.Cd-3tpCq.js";const k=JSON.parse('{"title":"页面生命周期: DOMContentLoaded, load, beforeunload, unload","description":"","frontmatter":{},"headers":[],"relativePath":"performance/code/pageLifecycle.md","filePath":"performance/code/pageLifecycle.md"}'),n={name:"performance/code/pageLifecycle.md"};function t(d,a,o,h,r,p){return s(),i("div",null,a[0]||(a[0]=[l(`<h1 id="页面生命周期-domcontentloaded-load-beforeunload-unload" tabindex="-1">页面生命周期: DOMContentLoaded, load, beforeunload, unload <a class="header-anchor" href="#页面生命周期-domcontentloaded-load-beforeunload-unload" aria-label="Permalink to &quot;页面生命周期: DOMContentLoaded, load, beforeunload, unload&quot;">​</a></h1><h2 id="引言" tabindex="-1">引言 <a class="header-anchor" href="#引言" aria-label="Permalink to &quot;引言&quot;">​</a></h2><p>在 Web 开发中，了解页面生命周期是非常重要的。页面生命周期定义了页面从加载到卸载的整个过程，包括各种事件和阶段。在本文中，我们将详细介绍四个关键事件：DOMContentLoaded、load、beforeunload 和 unload。我们将探讨这些事件的属性、API、应用场景，并提供一些代码示例。</p><h2 id="_1-domcontentloaded" tabindex="-1">1. DOMContentLoaded <a class="header-anchor" href="#_1-domcontentloaded" aria-label="Permalink to &quot;1. DOMContentLoaded&quot;">​</a></h2><h3 id="_1-1-属性" tabindex="-1">1.1 属性 <a class="header-anchor" href="#_1-1-属性" aria-label="Permalink to &quot;1.1 属性&quot;">​</a></h3><ul><li><code>type</code>：事件类型，值为 <code>&quot;DOMContentLoaded&quot;</code></li><li><code>bubbles</code>：布尔值，指示事件是否会冒泡，默认为 <code>false</code></li><li><code>cancelable</code>：布尔值，指示事件是否可以被取消，默认为 <code>false</code></li><li><code>target</code>：事件的目标对象，即触发事件的元素</li></ul><h3 id="_1-2-api" tabindex="-1">1.2 API <a class="header-anchor" href="#_1-2-api" aria-label="Permalink to &quot;1.2 API&quot;">​</a></h3><ul><li><code>EventTarget.addEventListener()</code>：用于注册事件监听器，以便在 DOMContentLoaded 事件触发时执行相应的处理函数。</li></ul><h3 id="_1-3-应用场景" tabindex="-1">1.3 应用场景 <a class="header-anchor" href="#_1-3-应用场景" aria-label="Permalink to &quot;1.3 应用场景&quot;">​</a></h3><p>DOMContentLoaded 事件在页面的 HTML 和 DOM 树加载完成后触发，但在所有外部资源（如图像、样式表、脚本等）加载完成之前。这使得我们可以在 DOM 加载完成后执行一些操作，例如初始化页面元素、注册事件监听器、执行一些初始的 JavaScript 逻辑等。</p><p>常见的应用场景包括：</p><ul><li>初始化页面元素</li><li>注册事件监听器</li><li>发送初始的 AJAX 请求</li><li>执行一些初始的 JavaScript 逻辑</li></ul><h3 id="_1-4-示例代码" tabindex="-1">1.4 示例代码 <a class="header-anchor" href="#_1-4-示例代码" aria-label="Permalink to &quot;1.4 示例代码&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;DOMContentLoaded&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // DOMContentLoaded 事件触发后执行的逻辑</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;DOMContentLoaded event triggered&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p>在上面的示例中，我们使用 <code>addEventListener</code> 方法注册了一个 DOMContentLoaded 事件监听器。当 DOMContentLoaded 事件触发时，控制台将输出 <code>&#39;DOMContentLoaded event triggered&#39;</code>。</p><h2 id="_2-load" tabindex="-1">2. load <a class="header-anchor" href="#_2-load" aria-label="Permalink to &quot;2. load&quot;">​</a></h2><h3 id="_2-1-属性" tabindex="-1">2.1 属性 <a class="header-anchor" href="#_2-1-属性" aria-label="Permalink to &quot;2.1 属性&quot;">​</a></h3><ul><li><code>type</code>：事件类型，值为 <code>&quot;load&quot;</code></li><li><code>bubbles</code>：布尔值，指示事件是否会冒泡，默认为 <code>false</code></li><li><code>cancelable</code>：布尔值，指示事件是否可以被取消，默认为 <code>false</code></li><li><code>target</code>：事件的目标对象，即触发事件的元素</li></ul><h3 id="_2-2-api" tabindex="-1">2.2 API <a class="header-anchor" href="#_2-2-api" aria-label="Permalink to &quot;2.2 API&quot;">​</a></h3><ul><li><code>EventTarget.addEventListener()</code>：用于注册事件监听器，以便在 load 事件触发时执行相应的处理函数。</li></ul><h3 id="_2-3-应用场景" tabindex="-1">2.3 应用场景 <a class="header-anchor" href="#_2-3-应用场景" aria-label="Permalink to &quot;2.3 应用场景&quot;">​</a></h3><p>load 事件在整个页面及其所有外部资源（如图像、样式表、脚本等）加载完成后触发。这意味着页面的所有内容已经可用，并且可以执行与页面渲染和交互相关的操作。</p><p>常见的应用场景包括：</p><ul><li>执行一些需要页面完全加载后才能进行的操作</li><li>初始化和配置第三方库和插件</li><li>启动动画或其他视觉效果</li></ul><h3 id="" tabindex="-1"><a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">​</a></h3><p>2.4 示例代码</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;load&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // load 事件触发后执行的逻辑</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;load event triggered&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p>在上面的示例中，我们使用 <code>addEventListener</code> 方法注册了一个 load 事件监听器。当 load 事件触发时，控制台将输出 <code>&#39;load event triggered&#39;</code>。</p><h2 id="_3-beforeunload" tabindex="-1">3. beforeunload <a class="header-anchor" href="#_3-beforeunload" aria-label="Permalink to &quot;3. beforeunload&quot;">​</a></h2><h3 id="_3-1-属性" tabindex="-1">3.1 属性 <a class="header-anchor" href="#_3-1-属性" aria-label="Permalink to &quot;3.1 属性&quot;">​</a></h3><ul><li><code>type</code>：事件类型，值为 <code>&quot;beforeunload&quot;</code></li><li><code>bubbles</code>：布尔值，指示事件是否会冒泡，默认为 <code>false</code></li><li><code>cancelable</code>：布尔值，指示事件是否可以被取消，默认为 <code>true</code></li><li><code>target</code>：事件的目标对象，即触发事件的元素</li></ul><h3 id="_3-2-api" tabindex="-1">3.2 API <a class="header-anchor" href="#_3-2-api" aria-label="Permalink to &quot;3.2 API&quot;">​</a></h3><ul><li><code>EventTarget.addEventListener()</code>：用于注册事件监听器，以便在 beforeunload 事件触发时执行相应的处理函数。</li><li><code>Event.preventDefault()</code>：用于阻止默认的 beforeunload 行为，例如显示浏览器默认的退出提示框。</li></ul><h3 id="_3-3-应用场景" tabindex="-1">3.3 应用场景 <a class="header-anchor" href="#_3-3-应用场景" aria-label="Permalink to &quot;3.3 应用场景&quot;">​</a></h3><p>beforeunload 事件在页面即将被卸载（关闭、刷新、导航到其他页面等）之前触发。它通常用于询问用户是否确定离开当前页面，并可以在事件处理函数中执行一些清理操作。</p><p>常见的应用场景包括：</p><ul><li>提示用户保存未保存的数据或离开前的确认提示</li><li>执行清理操作，如取消未完成的 AJAX 请求、释放资源等</li></ul><h3 id="_3-4-示例代码" tabindex="-1">3.4 示例代码 <a class="header-anchor" href="#_3-4-示例代码" aria-label="Permalink to &quot;3.4 示例代码&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;beforeunload&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // beforeunload 事件触发时执行的逻辑</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 可以在这里提示用户保存未保存的数据或离开前的确认提示</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  event.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">preventDefault</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 阻止默认的 beforeunload 行为</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  event.returnValue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Chrome 需要设置 returnValue 属性</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p>在上面的示例中，我们使用 <code>addEventListener</code> 方法注册了一个 beforeunload 事件监听器。在事件处理函数中，我们可以执行一些提示用户保存数据或离开前的确认逻辑。通过调用 <code>preventDefault</code> 方法，我们阻止了默认的 beforeunload 行为，并通过设置 <code>returnValue</code> 属性（在某些浏览器中需要设置）为空字符串来确保提示框的显示。</p><h2 id="_4-unload" tabindex="-1">4. unload <a class="header-anchor" href="#_4-unload" aria-label="Permalink to &quot;4. unload&quot;">​</a></h2><h3 id="_4-1-属性" tabindex="-1">4.1 属性 <a class="header-anchor" href="#_4-1-属性" aria-label="Permalink to &quot;4.1 属性&quot;">​</a></h3><ul><li><code>type</code>：事件类型，值为 <code>&quot;unload&quot;</code></li><li><code>bubbles</code>：布尔值，指示事件是否会冒泡，默认为 <code>false</code></li><li><code>cancelable</code>：布尔值，指示事件是否可以被取消，默认为 <code>false</code></li><li><code>target</code>：事件的目标对象，即触发事件的元素</li></ul><h3 id="_4-2-api" tabindex="-1">4.2 API <a class="header-anchor" href="#_4-2-api" aria-label="Permalink to &quot;4.2 API&quot;">​</a></h3><ul><li><code>EventTarget.addEventListener()</code>：用于注册事件监听器，以便在 unload 事件触发时执行相应的处理函数。</li></ul><h3 id="_4-3-应用场景" tabindex="-1">4.3 应用场景 <a class="header-anchor" href="#_4-3-应用场景" aria-label="Permalink to &quot;4.3 应用场景&quot;">​</a></h3><p>unload 事件在页面即将被卸载（关闭、刷新、导航到其他页面等）时触发。它可以用于执行一些清理操作，如释放资源、取消未完成的请求等。</p><p>常见的应用场景包括：</p><ul><li>释放页面所使用的资源，如清除定时器、取消事件监听器等</li><li>发送最后的统计数据或日志</li></ul><h3 id="_4-4-示例代码" tabindex="-1">4.4 示例代码 <a class="header-anchor" href="#_4-4-示例代码" aria-label="Permalink to &quot;4.4 示例代码&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;unload&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // unload 事件触发后执行的逻辑</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;unload event triggered&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p>在上面的示例中，我们使用 <code>addEventListener</code> 方法注册了一个 unload 事件监听器。当 unload 事件触发时，控制台将输出 <code>&#39;unload event triggered&#39;</code>。</p><h2 id="_5-总结" tabindex="-1">5. 总结 <a class="header-anchor" href="#_5-总结" aria-label="Permalink to &quot;5. 总结&quot;">​</a></h2><p>页面生命周期的四个重要事件：DOMContentLoaded、load、beforeunload 和 unload，定义了页面从加载到卸载的不同阶段。这些事件可以帮助我们在合适的时机执行相关的操作，提供更好的用户体验和数据处理。</p><ul><li>DOMContentLoaded 事件在 HTML 和 DOM 树加载完成后触发，适用于执行与 DOM 相关的初始化操作。</li><li>load 事件在整个页面及其外部资源加载完成后触发，适用于执行与页面渲染和交互相关的操作。</li><li>beforeunload 事件在页面即将被卸载之前触发，适用于询问用户是否确定离开页面或执行一些清理操作。</li><li>unload 事件在页面被卸载后触发，适用于执行最后的清理操作。</li></ul><p>了解页面生命周期事件及其应用场景对于优化页面加载和交互体验非常重要。通过合理利用这些事件，我们可以在适当的时机执行相关的逻辑，提供更好的用户交互和数据处理。</p>`,56)]))}const u=e(n,[["render",t]]);export{k as __pageData,u as default};
